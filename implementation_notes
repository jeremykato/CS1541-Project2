CS 1541 PROJECT 2 -- CACHE SIMULATOR
IMPLEMENTATION DECISIONS AND COMMENTARY

* We altered the bookkeeping for the ti_SQUASHED instructions so that they retained their original PC values. This is necessary because it allows them to be considered the correct instructions when being fetched from the I-cache rather than all as one identical instruction.

* We made the simplifying assumption that ti_NOP instructions would NOT be fetched from the I-cache. This avoided a major rework to the way our pipeline was implemented, and it's a reasonable assumption since that's how NO-OPs would work with dynamic hazard resolution. This makes the results still meaningful.

* Another simplifying assumption we made was that blocks in the write buffer were removed as soon as they started to write back into L2. That is, they could NOT be found in the buffer as hits while in the process of being transferred. This also allowed another value to enqueue during transfer. Since there was no clear requirement regarding this behavior, we picked what seemed like a reasonable approach and figured we would just be clear about the expected behavior here.

* In our implementation, the write buffer is ALWAYS checked on an L1 data cache miss (costing a cycle), even when the write buffer is empty. The only exception to this is if there is no write buffer (i.e., the write buffer size parameter in the config file is 0).

* Our write buffer was implemented using a queue interface we originally developed for a CS 1550 project because of its FIFO nature. Its specification is in queue.h and it has simple functions like enqueue, dequeue, contains, peek, and initialize. It simply stores integer values in a circular array-based rotation which correspond to the BLOCK addresses of evicted blocks. 

* We altered cache.h so that it stores the block address in the cache_blk struct in addition to the tag. Originally, this value was not recoverable from just the value of the tag and we needed it to properly identify which dirty blocks were being evicted from the cache in order to add them to the write buffer. Additionally, we added an int pointer argument to the cache_access function to serve as an additional return value. Specifically, we changed cache_access to update this value with the block address of the evicted block (if any) so that it would be accessable in the main simulation for use with the write buffer.

* At the end of the simulation, our program will finish any current data transfers to L2 as well as flushing the write buffer by writing back all of its blocks before terminating.

* Our simulation does not explicity store hits. We calculated them by simply counting accesses and misses and performing subtraction.

* We used a counter called l2_used to control the write buffer access to L2. Any value greater than zero symbolized that L2 was in use for that many more cycles before becoming available. For all other cycle penalties (i.e., pipeline stalls due to cache misses), we simply applied the penalties immediately. In most cases, this was possible because the entire pipe stalls together as per the project requirements. To make this work with the fact that the write buffer can be in the middle of transfers at any time, more logic is needed. We immediately add the buffer's remaining writing penalty in addition to the other penalties, set the memory available, and set l2_used to 1 so that it must wait until next cycle to begin writing again. This ensures that the simulation forces instruction and data cache misses to wait for the write buffer to finish writing before servicing the miss from L2. When an eviction takes place and the buffer is full, we clear space for the writeback and enqueue our data.